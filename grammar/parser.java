
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Apr 14 17:17:24 SGT 2014
//----------------------------------------------------

package syntax;

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Apr 14 17:17:24 SGT 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\046\000\002\002\003\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\004\000\002\002\004\000" +
    "\002\002\004\000\002\002\004\000\002\002\005\000\002" +
    "\002\005\000\002\002\005\000\002\002\005\000\002\002" +
    "\005\000\002\002\005\000\002\002\005\000\002\002\005" +
    "\000\002\002\005\000\002\002\005\000\002\002\005\000" +
    "\002\002\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\010\000\002\002\010\000\002\002\005\000\002\002" +
    "\010\000\002\002\006\000\002\002\005\000\002\002\005" +
    "\000\002\004\003\000\002\004\005\000\002\005\003\000" +
    "\002\005\002\000\002\003\003\000\002\003\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\120\000\040\004\021\006\011\011\020\015\013\016" +
    "\010\017\023\020\016\023\022\026\004\040\017\041\006" +
    "\042\012\045\015\046\005\047\007\001\002\000\040\004" +
    "\021\006\011\011\020\015\013\016\010\017\023\020\016" +
    "\023\022\026\004\040\017\041\006\042\012\045\015\046" +
    "\005\047\007\001\002\000\054\002\001\005\001\007\001" +
    "\010\001\013\001\014\001\021\001\022\001\024\001\025" +
    "\001\026\001\027\001\030\001\032\001\033\001\034\001" +
    "\035\001\036\001\037\001\043\001\044\001\001\002\000" +
    "\054\002\ufffe\005\ufffe\007\ufffe\010\ufffe\013\ufffe\014\ufffe" +
    "\021\ufffe\022\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe\030" +
    "\ufffe\032\ufffe\033\ufffe\034\ufffe\035\ufffe\036\ufffe\037\ufffe" +
    "\043\ufffe\044\ufffe\001\002\000\054\002\uffff\005\uffff\007" +
    "\uffff\010\uffff\013\uffff\014\uffff\021\uffff\022\uffff\024\uffff" +
    "\025\uffff\026\uffff\027\uffff\030\uffff\032\uffff\033\uffff\034" +
    "\uffff\035\uffff\036\uffff\037\uffff\043\uffff\044\uffff\001\002" +
    "\000\040\004\021\006\011\011\020\015\013\016\010\017" +
    "\023\020\016\023\022\026\004\040\017\041\006\042\012" +
    "\045\015\046\005\047\007\001\002\000\040\004\021\006" +
    "\011\011\020\015\013\016\010\017\023\020\016\023\022" +
    "\026\004\040\017\041\006\042\012\045\015\046\005\047" +
    "\007\001\002\000\054\002\ufffd\005\ufffd\007\ufffd\010\ufffd" +
    "\013\ufffd\014\ufffd\021\ufffd\022\ufffd\024\ufffd\025\ufffd\026" +
    "\ufffd\027\ufffd\030\ufffd\032\ufffd\033\ufffd\034\ufffd\035\ufffd" +
    "\036\ufffd\037\ufffd\043\ufffd\044\ufffd\001\002\000\040\004" +
    "\021\006\011\011\020\015\013\016\010\017\023\020\016" +
    "\023\022\026\004\040\017\041\006\042\012\045\015\046" +
    "\005\047\007\001\002\000\040\002\112\013\037\014\042" +
    "\025\032\026\025\027\036\030\033\032\034\033\030\034" +
    "\043\035\040\036\026\037\041\043\027\044\031\001\002" +
    "\000\056\002\ufffb\005\ufffb\007\ufffb\010\ufffb\013\ufffb\014" +
    "\ufffb\021\ufffb\022\ufffb\023\106\024\ufffb\025\ufffb\026\ufffb" +
    "\027\ufffb\030\ufffb\032\ufffb\033\ufffb\034\ufffb\035\ufffb\036" +
    "\ufffb\037\ufffb\043\ufffb\044\ufffb\001\002\000\040\004\021" +
    "\006\011\011\020\015\013\016\010\017\023\020\016\023" +
    "\022\026\004\040\017\041\006\042\012\045\015\046\005" +
    "\047\007\001\002\000\040\004\021\006\011\011\020\015" +
    "\013\016\010\017\023\020\016\023\022\026\004\040\017" +
    "\041\006\042\012\045\015\046\005\047\007\001\002\000" +
    "\004\023\067\001\002\000\004\045\062\001\002\000\040" +
    "\004\021\006\011\011\020\015\013\016\010\017\023\020" +
    "\016\023\022\026\004\040\017\041\006\042\012\045\015" +
    "\046\005\047\007\001\002\000\054\002\ufffc\005\ufffc\007" +
    "\ufffc\010\ufffc\013\ufffc\014\ufffc\021\ufffc\022\ufffc\024\ufffc" +
    "\025\ufffc\026\ufffc\027\ufffc\030\ufffc\032\ufffc\033\ufffc\034" +
    "\ufffc\035\ufffc\036\ufffc\037\ufffc\043\ufffc\044\ufffc\001\002" +
    "\000\040\013\037\014\042\024\035\025\032\026\025\027" +
    "\036\030\033\032\034\033\030\034\043\035\040\036\026" +
    "\037\041\043\027\044\031\001\002\000\040\004\021\006" +
    "\011\011\020\015\013\016\010\017\023\020\016\023\022" +
    "\026\004\040\017\041\006\042\012\045\015\046\005\047" +
    "\007\001\002\000\040\004\021\006\011\011\020\015\013" +
    "\016\010\017\023\020\016\023\022\026\004\040\017\041" +
    "\006\042\012\045\015\046\005\047\007\001\002\000\040" +
    "\004\021\006\011\011\020\015\013\016\010\017\023\020" +
    "\016\023\022\026\004\040\017\041\006\042\012\045\015" +
    "\046\005\047\007\001\002\000\040\004\021\006\011\011" +
    "\020\015\013\016\010\017\023\020\016\023\022\026\004" +
    "\040\017\041\006\042\012\045\015\046\005\047\007\001" +
    "\002\000\040\004\021\006\011\011\020\015\013\016\010" +
    "\017\023\020\016\023\022\026\004\040\017\041\006\042" +
    "\012\045\015\046\005\047\007\001\002\000\040\004\021" +
    "\006\011\011\020\015\013\016\010\017\023\020\016\023" +
    "\022\026\004\040\017\041\006\042\012\045\015\046\005" +
    "\047\007\001\002\000\040\004\021\006\011\011\020\015" +
    "\013\016\010\017\023\020\016\023\022\026\004\040\017" +
    "\041\006\042\012\045\015\046\005\047\007\001\002\000" +
    "\040\004\021\006\011\011\020\015\013\016\010\017\023" +
    "\020\016\023\022\026\004\040\017\041\006\042\012\045" +
    "\015\046\005\047\007\001\002\000\054\002\uffe2\005\uffe2" +
    "\007\uffe2\010\uffe2\013\uffe2\014\uffe2\021\uffe2\022\uffe2\024" +
    "\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2\032\uffe2\033\uffe2" +
    "\034\uffe2\035\uffe2\036\uffe2\037\uffe2\043\uffe2\044\uffe2\001" +
    "\002\000\040\004\021\006\011\011\020\015\013\016\010" +
    "\017\023\020\016\023\022\026\004\040\017\041\006\042" +
    "\012\045\015\046\005\047\007\001\002\000\040\004\021" +
    "\006\011\011\020\015\013\016\010\017\023\020\016\023" +
    "\022\026\004\040\017\041\006\042\012\045\015\046\005" +
    "\047\007\001\002\000\040\004\021\006\011\011\020\015" +
    "\013\016\010\017\023\020\016\023\022\026\004\040\017" +
    "\041\006\042\012\045\015\046\005\047\007\001\002\000" +
    "\040\004\021\006\011\011\020\015\013\016\010\017\023" +
    "\020\016\023\022\026\004\040\017\041\006\042\012\045" +
    "\015\046\005\047\007\001\002\000\040\004\021\006\011" +
    "\011\020\015\013\016\010\017\023\020\016\023\022\026" +
    "\004\040\017\041\006\042\012\045\015\046\005\047\007" +
    "\001\002\000\040\004\021\006\011\011\020\015\013\016" +
    "\010\017\023\020\016\023\022\026\004\040\017\041\006" +
    "\042\012\045\015\046\005\047\007\001\002\000\040\002" +
    "\uffea\005\uffea\007\uffea\010\uffea\013\037\014\042\021\uffea" +
    "\022\uffea\024\uffea\025\032\026\025\027\036\030\033\036" +
    "\uffea\037\uffea\001\002\000\054\002\ufff6\005\ufff6\007\ufff6" +
    "\010\ufff6\013\ufff6\014\042\021\ufff6\022\ufff6\024\ufff6\025" +
    "\032\026\025\027\036\030\033\032\ufff6\033\ufff6\034\ufff6" +
    "\035\ufff6\036\ufff6\037\ufff6\043\ufff6\044\ufff6\001\002\000" +
    "\054\002\uffef\005\uffef\007\uffef\010\uffef\013\037\014\042" +
    "\021\uffef\022\uffef\024\uffef\025\032\026\025\027\036\030" +
    "\033\032\034\033\030\034\043\035\040\036\026\037\uffef" +
    "\043\027\044\031\001\002\000\040\002\uffe9\005\uffe9\007" +
    "\uffe9\010\uffe9\013\037\014\042\021\uffe9\022\uffe9\024\uffe9" +
    "\025\032\026\025\027\036\030\033\036\uffe9\037\uffe9\001" +
    "\002\000\054\002\ufff5\005\ufff5\007\ufff5\010\ufff5\013\037" +
    "\014\042\021\ufff5\022\ufff5\024\ufff5\025\032\026\025\027" +
    "\036\030\033\032\ufff5\033\ufff5\034\ufff5\035\ufff5\036\ufff5" +
    "\037\ufff5\043\ufff5\044\ufff5\001\002\000\054\002\ufff2\005" +
    "\ufff2\007\ufff2\010\ufff2\013\ufff2\014\ufff2\021\ufff2\022\ufff2" +
    "\024\ufff2\025\ufff2\026\ufff2\027\ufff2\030\ufff2\032\ufff2\033" +
    "\ufff2\034\ufff2\035\ufff2\036\ufff2\037\ufff2\043\ufff2\044\ufff2" +
    "\001\002\000\040\002\uffed\005\uffed\007\uffed\010\uffed\013" +
    "\037\014\042\021\uffed\022\uffed\024\uffed\025\032\026\025" +
    "\027\036\030\033\036\uffed\037\uffed\001\002\000\054\002" +
    "\ufff1\005\ufff1\007\ufff1\010\ufff1\013\ufff1\014\ufff1\021\ufff1" +
    "\022\ufff1\024\ufff1\025\ufff1\026\ufff1\027\ufff1\030\ufff1\032" +
    "\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1\037\ufff1\043\ufff1" +
    "\044\ufff1\001\002\000\054\002\ufff4\005\ufff4\007\ufff4\010" +
    "\ufff4\013\ufff4\014\ufff4\021\ufff4\022\ufff4\024\ufff4\025\ufff4" +
    "\026\ufff4\027\036\030\033\032\ufff4\033\ufff4\034\ufff4\035" +
    "\ufff4\036\ufff4\037\ufff4\043\ufff4\044\ufff4\001\002\000\040" +
    "\002\uffeb\005\uffeb\007\uffeb\010\uffeb\013\037\014\042\021" +
    "\uffeb\022\uffeb\024\uffeb\025\032\026\025\027\036\030\033" +
    "\036\uffeb\037\uffeb\001\002\000\040\002\uffee\005\uffee\007" +
    "\uffee\010\uffee\013\037\014\042\021\uffee\022\uffee\024\uffee" +
    "\025\032\026\025\027\036\030\033\036\uffee\037\uffee\001" +
    "\002\000\040\002\uffec\005\uffec\007\uffec\010\uffec\013\037" +
    "\014\042\021\uffec\022\uffec\024\uffec\025\032\026\025\027" +
    "\036\030\033\036\uffec\037\uffec\001\002\000\054\002\ufff0" +
    "\005\ufff0\007\ufff0\010\ufff0\013\037\014\042\021\ufff0\022" +
    "\ufff0\024\ufff0\025\032\026\025\027\036\030\033\032\034" +
    "\033\030\034\043\035\040\036\ufff0\037\ufff0\043\027\044" +
    "\031\001\002\000\054\002\ufff3\005\ufff3\007\ufff3\010\ufff3" +
    "\013\ufff3\014\ufff3\021\ufff3\022\ufff3\024\ufff3\025\ufff3\026" +
    "\ufff3\027\036\030\033\032\ufff3\033\ufff3\034\ufff3\035\ufff3" +
    "\036\ufff3\037\ufff3\043\ufff3\044\ufff3\001\002\000\004\044" +
    "\063\001\002\000\040\004\021\006\011\011\020\015\013" +
    "\016\010\017\023\020\016\023\022\026\004\040\017\041" +
    "\006\042\012\045\015\046\005\047\007\001\002\000\040" +
    "\005\065\013\037\014\042\025\032\026\025\027\036\030" +
    "\033\032\034\033\030\034\043\035\040\036\026\037\041" +
    "\043\027\044\031\001\002\000\040\004\021\006\011\011" +
    "\020\015\013\016\010\017\023\020\016\023\022\026\004" +
    "\040\017\041\006\042\012\045\015\046\005\047\007\001" +
    "\002\000\054\002\uffe7\005\uffe7\007\uffe7\010\uffe7\013\037" +
    "\014\042\021\uffe7\022\uffe7\024\uffe7\025\032\026\025\027" +
    "\036\030\033\032\034\033\030\034\043\035\040\036\026" +
    "\037\041\043\027\044\031\001\002\000\006\024\uffde\045" +
    "\071\001\002\000\004\024\uffdf\001\002\000\006\022\076" +
    "\024\uffe1\001\002\000\004\024\073\001\002\000\004\012" +
    "\074\001\002\000\040\004\021\006\011\011\020\015\013" +
    "\016\010\017\023\020\016\023\022\026\004\040\017\041" +
    "\006\042\012\045\015\046\005\047\007\001\002\000\054" +
    "\002\uffe5\005\uffe5\007\uffe5\010\uffe5\013\037\014\042\021" +
    "\uffe5\022\uffe5\024\uffe5\025\032\026\025\027\036\030\033" +
    "\032\034\033\030\034\043\035\040\036\026\037\041\043" +
    "\027\044\031\001\002\000\004\045\071\001\002\000\004" +
    "\024\uffe0\001\002\000\054\002\ufffa\005\ufffa\007\ufffa\010" +
    "\ufffa\013\037\014\042\021\ufffa\022\ufffa\024\ufffa\025\032" +
    "\026\025\027\036\030\033\032\034\033\030\034\043\035" +
    "\040\036\ufffa\037\ufffa\043\027\044\031\001\002\000\006" +
    "\021\104\022\103\001\002\000\044\013\037\014\042\021" +
    "\uffdd\022\uffdd\024\uffdd\025\032\026\025\027\036\030\033" +
    "\032\034\033\030\034\043\035\040\036\026\037\041\043" +
    "\027\044\031\001\002\000\040\004\021\006\011\011\020" +
    "\015\013\016\010\017\023\020\016\023\022\026\004\040" +
    "\017\041\006\042\012\045\015\046\005\047\007\001\002" +
    "\000\054\002\uffe6\005\uffe6\007\uffe6\010\uffe6\013\uffe6\014" +
    "\uffe6\021\uffe6\022\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6" +
    "\030\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\036\uffe6\037" +
    "\uffe6\043\uffe6\044\uffe6\001\002\000\044\013\037\014\042" +
    "\021\uffdc\022\uffdc\024\uffdc\025\032\026\025\027\036\030" +
    "\033\032\034\033\030\034\043\035\040\036\026\037\041" +
    "\043\027\044\031\001\002\000\042\004\021\006\011\011" +
    "\020\015\013\016\010\017\023\020\016\023\022\024\107" +
    "\026\004\040\017\041\006\042\012\045\015\046\005\047" +
    "\007\001\002\000\054\002\uffe3\005\uffe3\007\uffe3\010\uffe3" +
    "\013\uffe3\014\uffe3\021\uffe3\022\uffe3\024\uffe3\025\uffe3\026" +
    "\uffe3\027\uffe3\030\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3" +
    "\036\uffe3\037\uffe3\043\uffe3\044\uffe3\001\002\000\006\022" +
    "\103\024\111\001\002\000\054\002\uffe4\005\uffe4\007\uffe4" +
    "\010\uffe4\013\uffe4\014\uffe4\021\uffe4\022\uffe4\024\uffe4\025" +
    "\uffe4\026\uffe4\027\uffe4\030\uffe4\032\uffe4\033\uffe4\034\uffe4" +
    "\035\uffe4\036\uffe4\037\uffe4\043\uffe4\044\uffe4\001\002\000" +
    "\004\002\000\001\002\000\054\002\ufff8\005\ufff8\007\ufff8" +
    "\010\ufff8\013\ufff8\014\ufff8\021\ufff8\022\ufff8\024\ufff8\025" +
    "\ufff8\026\ufff8\027\ufff8\030\ufff8\032\ufff8\033\ufff8\034\ufff8" +
    "\035\ufff8\036\ufff8\037\ufff8\043\ufff8\044\ufff8\001\002\000" +
    "\040\007\115\013\037\014\042\025\032\026\025\027\036" +
    "\030\033\032\034\033\030\034\043\035\040\036\026\037" +
    "\041\043\027\044\031\001\002\000\040\004\021\006\011" +
    "\011\020\015\013\016\010\017\023\020\016\023\022\026" +
    "\004\040\017\041\006\042\012\045\015\046\005\047\007" +
    "\001\002\000\040\010\117\013\037\014\042\025\032\026" +
    "\025\027\036\030\033\032\034\033\030\034\043\035\040" +
    "\036\026\037\041\043\027\044\031\001\002\000\040\004" +
    "\021\006\011\011\020\015\013\016\010\017\023\020\016" +
    "\023\022\026\004\040\017\041\006\042\012\045\015\046" +
    "\005\047\007\001\002\000\054\002\uffe8\005\uffe8\007\uffe8" +
    "\010\uffe8\013\037\014\042\021\uffe8\022\uffe8\024\uffe8\025" +
    "\032\026\025\027\036\030\033\032\034\033\030\034\043" +
    "\035\040\036\026\037\041\043\027\044\031\001\002\000" +
    "\054\002\ufff7\005\ufff7\007\ufff7\010\ufff7\013\ufff7\014\ufff7" +
    "\021\ufff7\022\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\030" +
    "\ufff7\032\ufff7\033\ufff7\034\ufff7\035\ufff7\036\ufff7\037\ufff7" +
    "\043\ufff7\044\ufff7\001\002\000\054\002\ufff9\005\ufff9\007" +
    "\ufff9\010\ufff9\013\ufff9\014\ufff9\021\ufff9\022\ufff9\024\ufff9" +
    "\025\ufff9\026\ufff9\027\ufff9\030\ufff9\032\ufff9\033\ufff9\034" +
    "\ufff9\035\ufff9\036\ufff9\037\ufff9\043\ufff9\044\ufff9\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\120\000\004\002\013\001\001\000\004\002\121\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\120\001\001\000\004\002\113\001\001\000" +
    "\002\001\001\000\004\002\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\101\003\100\001\001\000" +
    "\004\002\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\002\060\001\001\000\004\002\057\001\001" +
    "\000\004\002\056\001\001\000\004\002\055\001\001\000" +
    "\004\002\054\001\001\000\004\002\053\001\001\000\004" +
    "\002\052\001\001\000\004\002\051\001\001\000\002\001" +
    "\001\000\004\002\050\001\001\000\004\002\047\001\001" +
    "\000\004\002\046\001\001\000\004\002\045\001\001\000" +
    "\004\002\044\001\001\000\004\002\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\002\063\001\001\000" +
    "\002\001\001\000\004\002\065\001\001\000\002\001\001" +
    "\000\006\004\067\005\071\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\002\074\001\001\000\002\001\001\000\004\004\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\002\101\003\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\002\115\001\001\000\002\001\001\000\004\002\117\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }




   scanner lexer;

   public parser(scanner lexer) {
     super(lexer);
     this.lexer = lexer;
   }

  /* Change the method report_error so it will display the line
      and column of where the error occurred in the input as well as the reason
      for the error which is passed into the method in the String 'message'.  */
   public void report_error(String message, Object info) {
     /* Create a StringBuffer called 'm' with the string 'Error' in it. */
     StringBuffer m = new StringBuffer("Error");

     /* Check if the information passed to the method is the same type as the
        type java_cup.runtime.Symbol. */
     if (info instanceof java_cup.runtime.Symbol) {

       /* Declare a java_cup.runtime.Symbol object 's' with the information in the
           object info that is being typecasted as a java_cup.runtime.Symbol object. */
       java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

       /* Check if the line number in the input is greater or equal to zero. */
       if (s.left >= 0) {

         /* Add to the end of the StringBuffer error message the line number of
            the error in the input. */
         m.append(" in line "+(s.left+1));

         /* Check if the column number in the input is greater or equal to
            zero. */
         if (s.right >= 0)

           /* Add to the end of the StringBuffer error message the column number
              of the error in the input. */
           m.append(", column "+(s.right+1));
         }
     }

     /* Add to the end of the StringBuffer error message created in this
        method the message that was passed into this method. */
     m.append(" : "+message);

     /* Print the contents of the StringBuffer 'm', which contains an error
        message out on a line. */
     System.out.println(m);
   }

   /* Change the method report_fatal_error so when it reports a fatal error it
      will display the line and column number of where the fatal error
      occurred in the input as well as the reason for the fatal error which is
      passed into the method in the object 'message' and then exit.*/
   public void report_fatal_error(String message, Object info) {
     report_error(message, info);
     System.exit(1);
     }

 
}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // nonEmptyExpressionList ::= nonEmptyExpressionList COMMA expression 
            {
              Vector<Expression> RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector<Expression> es = (Vector<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 es.add(e); RESULT = es; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nonEmptyExpressionList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // nonEmptyExpressionList ::= expression 
            {
              Vector<Expression> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Vector<Expression> es = new Vector<Expression>();
          es.add(e); RESULT = es;
       
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nonEmptyExpressionList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // identifierList ::= 
            {
              Vector<String> RESULT =null;
		 RESULT = new Vector<String>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifierList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // identifierList ::= nonEmptyIdentifierList 
            {
              Vector<String> RESULT =null;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector<String> is = (Vector<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = is; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("identifierList",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // nonEmptyIdentifierList ::= IDENTIFIER COMMA nonEmptyIdentifierList 
            {
              Vector<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int isleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int isright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Vector<String> is = (Vector<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 is.insertElementAt(i,0); RESULT = is; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nonEmptyIdentifierList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // nonEmptyIdentifierList ::= IDENTIFIER 
            {
              Vector<String> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Vector<String> is = new Vector<String>(); is.insertElementAt(i,0); RESULT = is; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nonEmptyIdentifierList",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expression ::= LPAREN expression RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expression ::= IDENTIFIER LPAREN RPAREN 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Application(id, new Vector<Expression>()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expression ::= IDENTIFIER LPAREN nonEmptyExpressionList RPAREN 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector<Expression> es = (Vector<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Application(id, es); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expression ::= FUNCTION LPAREN identifierList RPAREN ARROW expression 
            {
              Expression RESULT =null;
		int idsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector<String> ids = (Vector<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression body = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new FunctionExpression(ids, body); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expression ::= LSQBR nonEmptyExpressionList RSQBR 
            {
              Expression RESULT =null;
		int esleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int esright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector<Expression> es = (Vector<Expression>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new PairConstant(es); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expression ::= LET IDENTIFIER EQUAL expression IN expression 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new LetExpression(id, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expression ::= IF expression THEN expression ELSE expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e3left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e3right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e3 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IfExpression(e1, e2, e3); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expression ::= expression GEQ expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryPrimitiveApplication(">=",e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression ::= expression LEQ expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryPrimitiveApplication("<=",e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expression ::= expression EQUAL expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryPrimitiveApplication("=",e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expression ::= expression EQUALEQUAL expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryPrimitiveApplication("==",e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expression ::= expression LESS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryPrimitiveApplication("<",e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expression ::= expression GREATER expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryPrimitiveApplication(">",e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // expression ::= expression OR expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryPrimitiveApplication("|",e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // expression ::= expression AND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryPrimitiveApplication("&",e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // expression ::= expression DIV expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryPrimitiveApplication("/",e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // expression ::= expression TIMES expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryPrimitiveApplication("*",e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expression ::= expression MINUS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryPrimitiveApplication("-",e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expression ::= expression PLUS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryPrimitiveApplication("+",e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // expression ::= expression APPEND expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryPrimitiveApplication("@",e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // expression ::= expression CONS expression 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new BinaryPrimitiveApplication(":",e1,e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // expression ::= TAIL expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryPrimitiveApplication("~",e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // expression ::= HEAD expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryPrimitiveApplication("#",e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // expression ::= MINUS expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryPrimitiveApplication("-",e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expression ::= NOT expression 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new UnaryPrimitiveApplication("!",e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expression ::= IDENTIFIER 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Variable(s); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expression ::= EMPTYLIST 
            {
              Expression RESULT =null;
		 RESULT = new EmptyList(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expression ::= FALSE 
            {
              Expression RESULT =null;
		 RESULT = new BooleanConstant(false); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expression ::= TRUE 
            {
              Expression RESULT =null;
		 RESULT = new BooleanConstant(true); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expression ::= STRING 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new StringConstant(x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= expression EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expression start_val = (Expression)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // expression ::= NUMBER 
            {
              Expression RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double x = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new NumberConstant(x.doubleValue()); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expression",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

